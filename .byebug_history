c
CSV.foreach(file.path, headers: true) do |row|
            Hall.create!(
              name: row["Name"],
              capacity: row["Capacity"]
           )end
CSV.foreach(file.path, headers: true) do |row|
            Hall.create!(
              name: row["Name"],
              capacity: row["Capacity"]
           )
file.path
file
n
if file
if file?
n
params
c
n
current_user.premium?
c
n
current_user.premium?
current_user
c
params
n
c
identifier
User.find_by_email(identifier)
User.find_by_email(identifier
n
identifier.match?(/\A[^@\s]+@[^@\s]+\z/)
n
 params[:identifier]
params
c
expires_at = JsonWebToken.decode(token)[:exp]
token = JsonWebToken.encode(user_id: user.id)
JsonWebToken.decode(eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJleHAiOjE3MjYyNTU4NDV9.bzGekTJyv5MAH8YjqHjWTypOaVMGBvQwjtd9gm8l83Y)[:exp]
JsonWebToken.encode(user_id: user.id)
n
 user&.authenticate(params[:password])
n
User.find_by(email: params[:email])
params
c
@seat
c
params
ticket_params[:seat_id]
@showtime.seats.count
@showtime
@seat
c
@showtime.seats.all.count
@showtime
c
n
Showtime.find(params[:showtime_id])
exit
cc
c
Seat.create(seat_number: "#{row}#{seat_num}", seat_type: seat_type,hall: self)
seat_num
seat_type
row
n
c
self
Seat.create(seat_number: "#{row}#{seat_num}",hall: self)
seat_num
row
n
seats_per_row
n
seat_types
n
c
@showtime.lock!
@showtime
c
n
Ticket.exists?(showtime_id: @showtime.id, seat_number: params[:ticket][:seat_number])
c
@showtime.id
Ticket.exists?(showtime_id: @showtime.id, seat_number: params[:ticket][:seat_number])
n
params[:ticket][:seat_number]
params[:seat_number]
params
c
n
c
n
c
n
c
Ticket.exists?(showtime_id: showtime_id, seat_number: seat_number)
self.exists?(showtime_id: showtime_id, seat_number: seat_number)
Ticket.exists?(showtime_id: showtime_id, seat_number: seat_number)
self.showtime_id
self
self.seat_number.present?
self.seat_number.exists?
self.seat_number
self
Ticket.seat_number
Ticket
params
c
@movie.showtimes
@movie
params
c
params
c
params[:showtime][:hall_id]
params[:hall_id]
params
c
@movie
c
n
params
@movie
c
authorization_header
if authorization_header?
n
request.headers['authorization']n
request.headers['authorization']
request.headers['Authorization']
c
n
authorization_header.split(" ").last
authorization_header.split(" ")
n
 request.headers['Authorization']
request.headers
request
c
n
if decoded_token?
n
decoded_token
n
c
decoded_token
n
c
n
decoded_token
@current_user
n
current_user
c
current_user.email
current_user
c
request
decode_error
decoded_token
